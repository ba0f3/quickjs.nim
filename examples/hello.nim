import quickjs, quickjs/libc

var hello = [byte(0x02), 0x04, 0x0e, 0x63, 0x6f, 0x6e, 0x73, 0x6f,
 0x6c, 0x65, 0x06, 0x6c, 0x6f, 0x67, 0x16, 0x48,
 0x65, 0x6c, 0x6c, 0x6f, 0x20, 0x57, 0x6f, 0x72,
 0x6c, 0x64, 0x22, 0x65, 0x78, 0x61, 0x6d, 0x70,
 0x6c, 0x65, 0x73, 0x2f, 0x68, 0x65, 0x6c, 0x6c,
 0x6f, 0x2e, 0x6a, 0x73, 0x0e, 0x00, 0x06, 0x00,
 0xa0, 0x01, 0x00, 0x01, 0x00, 0x03, 0x00, 0x00,
 0x14, 0x01, 0xa2, 0x01, 0x00, 0x00, 0x00, 0x38,
 0xe1, 0x00, 0x00, 0x00, 0x42, 0xe2, 0x00, 0x00,
 0x00, 0x04, 0xe3, 0x00, 0x00, 0x00, 0x24, 0x01,
 0x00, 0xcd, 0x28, 0xc8, 0x03, 0x01, 0x00]

var args: array[1, cstring]

proc JS_NewCustomContext(rt: JSRuntime): JSContext =
  result = JS_NewContextRaw(rt)
  if result != nil:
    JS_AddIntrinsicBaseObjects(result)
  else:
    quit("failed to create new context")

var rt = JS_NewRuntime()
js_std_set_worker_new_context_func(JS_NewCustomContext)
js_std_init_handlers(rt)
var ctx = JS_NewCustomContext(rt)
js_std_add_helpers(ctx, 0, addr(args[0]))
js_std_eval_binary(ctx, addr(hello[0]), sizeof(hello).cuint, 0)
js_std_loop(ctx)
JS_FreeContext(ctx)
JS_FreeRuntime(rt)
